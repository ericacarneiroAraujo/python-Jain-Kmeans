from sklearn.cluster import KMeans
from sklearn import metrics
from scipy.spatial.distance import cdist
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#Elbow method and K-means clustering using JAIN dataset.


X = pd.read_csv("Jain_toy_CLUSTER.txt", sep="	", header=None, names=["X", "Y"])
X = pd.DataFrame(X)

plt.scatter(X['X'], X['Y'])
plt.show()

distortions = []
inertias = []
mapping1 = {}
mapping2 = {}
K = range(1, 10)

for k in K:
  kmeanModel = KMeans(n_clusters = k).fit(X)
  kmeanModel.fit(X)
#A SOMA DAS DISTÂNCIAS MÍNIMAS DOS CENTROS DIVIDDIDA PELA QUANTIDADE. 
  distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, 
                      'euclidean'),axis=1)) / X.shape[0]) 
  #?????????
  inertias.append(kmeanModel.inertia_) 
  
  mapping1[k] = sum(np.min(cdist(X, kmeanModel.cluster_centers_, 
                 'euclidean'),axis=1)) / X.shape[0] 
  mapping2[k] = kmeanModel.inertia_ 

for key,val in mapping1.items():
  print(str(key)+ ' : '+str(val))


plt.plot(K, distortions, 'bx-')
plt.xlabel("Valores de K")
plt.ylabel("Distorção")
plt.title("Elbow method")
plt.show()

#Plotando inércia:
for key,val in mapping2.items(): 
    print(str(key)+' : '+str(val)) 

plt.plot(K, inertias, 'bx-')
plt.xlabel("Valores de K")
plt.ylabel("Inércia")
plt.title("Elbow method using Inertia")
plt.show()

#Utilizando k calculado pelo "elbow method"
kmeans = KMeans(n_clusters=3)
kmeans.fit(X)
y_kmeans = kmeans.predict(X)
plt.scatter(X["X"], X["Y"], c=y_kmeans, s=50, cmap='viridis')

centers = kmeans.cluster_centers_
plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.5);